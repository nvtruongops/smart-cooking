name: Deploy Smart Cooking Infrastructure

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  test:
    name: Test CDK Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cdk/package-lock.json

      - name: Install CDK dependencies
        working-directory: cdk
        run: npm ci

      - name: Run CDK tests
        working-directory: cdk
        run: npm test

      - name: CDK Synth (validate templates)
        working-directory: cdk
        run: |
          npm run build
          npx cdk synth --context environment=dev

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cdk/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: cdk
        run: npm ci

      - name: CDK Bootstrap (if needed)
        working-directory: cdk
        run: npx cdk bootstrap --context environment=dev

      - name: CDK Deploy to Development
        working-directory: cdk
        run: |
          npm run build
          npx cdk deploy --all --require-approval never --context environment=dev

      - name: Save deployment outputs
        working-directory: cdk
        run: |
          npx cdk deploy --all --outputs-file ../deployment-outputs-dev.json --context environment=dev

      - name: Validate deployment
        if: success()
        run: |
          chmod +x scripts/validate-deployment.sh
          ./scripts/validate-deployment.sh -e dev
          
      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-outputs-dev
          path: deployment-outputs-dev.json

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cdk/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: cdk
        run: npm ci

      - name: CDK Bootstrap (if needed)
        working-directory: cdk
        run: npx cdk bootstrap --context environment=prod

      - name: CDK Diff (show changes)
        working-directory: cdk
        run: |
          npm run build
          npx cdk diff --context environment=prod

      - name: CDK Deploy to Production
        working-directory: cdk
        run: npx cdk deploy --all --require-approval never --context environment=prod

      - name: Save deployment outputs
        working-directory: cdk
        run: |
          npx cdk deploy --all --outputs-file ../deployment-outputs-prod.json --context environment=prod
          
      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-outputs-prod
          path: deployment-outputs-prod.json

      - name: Validate deployment
        if: success()
        run: |
          chmod +x scripts/validate-deployment.sh
          ./scripts/validate-deployment.sh -e prod

      - name: Notify deployment success
        if: success()
        run: |
          echo "âœ… Production deployment successful!"
          echo "Check CloudWatch dashboard for monitoring"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: cdk/package-lock.json

      - name: Install dependencies
        working-directory: cdk
        run: npm ci

      - name: Run npm audit
        working-directory: cdk
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test
        continue-on-error: true

  cleanup:
    name: Cleanup Old Resources
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-prod]
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup old CloudWatch logs
        run: |
          # Delete log groups older than 30 days (production)
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/smart-cooking" \
            --query 'logGroups[?creationTime < `'$(date -d '30 days ago' +%s)'000`].logGroupName' \
            --output text | xargs -r -n1 aws logs delete-log-group --log-group-name

      - name: Cleanup old S3 versions
        run: |
          # Clean up old versions in S3 buckets (keep last 5 versions)
          aws s3api list-buckets --query 'Buckets[?contains(Name, `smart-cooking`)].Name' --output text | \
          while read bucket; do
            aws s3api list-object-versions --bucket "$bucket" --output text --query 'Versions[?IsLatest==`false`].[Key,VersionId]' | \
            head -n -5 | \
            while read key version; do
              aws s3api delete-object --bucket "$bucket" --key "$key" --version-id "$version"
            done
          done