name: Deploy Frontend to S3 and CloudFront

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ matrix.environment == 'prod' && secrets.AWS_ACCESS_KEY_ID_PROD || secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ matrix.environment == 'prod' && secrets.AWS_SECRET_ACCESS_KEY_PROD || secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get infrastructure outputs
        id: infra-outputs
        run: |
          # Get S3 bucket name and CloudFront distribution ID from CDK outputs
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name SmartCooking-${{ matrix.environment }}-Frontend \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteBucketName`].OutputValue' \
            --output text)
          
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name SmartCooking-${{ matrix.environment }}-Frontend \
            --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
            --output text)
          
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name SmartCooking-${{ matrix.environment }}-Api \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name SmartCooking-${{ matrix.environment }}-Auth \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
            --output text)
          
          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks \
            --stack-name SmartCooking-${{ matrix.environment }}-Auth \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' \
            --output text)
          
          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "user-pool-id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "user-pool-client-id=$USER_POOL_CLIENT_ID" >> $GITHUB_OUTPUT

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Create environment configuration
        working-directory: frontend
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_API_URL=${{ steps.infra-outputs.outputs.api-url }}
          NEXT_PUBLIC_USER_POOL_ID=${{ steps.infra-outputs.outputs.user-pool-id }}
          NEXT_PUBLIC_USER_POOL_CLIENT_ID=${{ steps.infra-outputs.outputs.user-pool-client-id }}
          NEXT_PUBLIC_ENVIRONMENT=${{ matrix.environment }}
          NEXT_PUBLIC_REGION=${{ env.AWS_REGION }}
          NEXT_PUBLIC_S3_BUCKET=${{ steps.infra-outputs.outputs.bucket-name }}
          EOF

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --run --coverage

      - name: Build frontend application
        working-directory: frontend
        run: |
          npm run build
          npm run export

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.environment }}
          path: frontend/out/
          retention-days: 7

      - name: Sync files to S3
        working-directory: frontend
        run: |
          # Sync all files to S3 with appropriate cache headers
          aws s3 sync out/ s3://${{ steps.infra-outputs.outputs.bucket-name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "service-worker.js"
          
          # Upload HTML files with shorter cache
          aws s3 sync out/ s3://${{ steps.infra-outputs.outputs.bucket-name }}/ \
            --cache-control "public, max-age=3600" \
            --include "*.html" \
            --include "*.json" \
            --include "service-worker.js"

      - name: Invalidate CloudFront cache
        run: |
          # Create invalidation for all files
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ steps.infra-outputs.outputs.distribution-id }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Created CloudFront invalidation: $INVALIDATION_ID"
          
          # Wait for invalidation to complete (optional, for verification)
          echo "Waiting for invalidation to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ steps.infra-outputs.outputs.distribution-id }} \
            --id $INVALIDATION_ID
          
          echo "✅ CloudFront cache invalidation completed"

      - name: Verify deployment
        run: |
          # Get the website URL
          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name SmartCooking-${{ matrix.environment }}-Frontend \
            --query 'Stacks[0].Outputs[?OutputKey==`WebsiteUrl`].OutputValue' \
            --output text)
          
          echo "🚀 Frontend deployed successfully!"
          echo "Website URL: $WEBSITE_URL"
          
          # Basic health check
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$WEBSITE_URL")
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Website is responding correctly (HTTP $HTTP_STATUS)"
          else
            echo "❌ Website health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment to ${{ matrix.environment }} completed successfully"
          else
            echo "❌ Deployment to ${{ matrix.environment }} failed"
          fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
      - name: Notify success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "🎉 Frontend deployment successful!"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

      - name: Notify failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "💥 Frontend deployment failed!"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please check the logs and fix the issues."