/**
 * Test Suite: auth-handler Lambda Function
 * 
 * Purpose: Post-authentication trigger - Create user profile on sign-up
 * Trigger: Cognito Post-Authentication
 * Memory: 128MB | Timeout: 10s
 * 
 * References:
 * - docs/lambda/README.md - Lambda function details
 * - docs/dynamodb/SCHEMA.md - User Profile schema
 * - README.md - Authentication flow
 */

import { handler } from './index';
import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, PutCommand } from '@aws-sdk/lib-dynamodb';
import { mockClient } from 'aws-sdk-client-mock';

const dynamoMock = mockClient(DynamoDBDocumentClient);

describe('auth-handler Lambda Function', () => {
  beforeEach(() => {
    dynamoMock.reset();
    // Configure mock to return successful responses
    dynamoMock.on(PutCommand).resolves({});
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('Post-Authentication User Profile Creation', () => {
    it('should create user profile after successful Cognito authentication', async () => {
      // Mock DynamoDB PutItem
      dynamoMock.on(PutCommand).resolves({});

      const event = {
        version: '1',
        region: 'ap-southeast-1',
        userPoolId: 'ap-southeast-1_test123',
        userName: 'test-user-123',
        callerContext: {
          awsSdkVersion: '2',
          clientId: 'test-client-id'
        },
        triggerSource: 'PostConfirmation_ConfirmSignUp',
        request: {
          userAttributes: {
            sub: '123e4567-e89b-12d3-a456-426614174000',
            email: 'testuser@example.com',
            email_verified: 'true',
            name: 'Test User'
          }
        },
        response: {}
      };

      const result = await handler(event);

      // Should return the event unchanged
      expect(result).toEqual(event);

      // Should call DynamoDB to create user profile
      expect(dynamoMock.calls()).toHaveLength(1);
      
      const putItemCall = dynamoMock.call(0);
      expect(putItemCall.args[0].input).toMatchObject({
        TableName: process.env.DYNAMODB_TABLE || 'smart-cooking-data',
        Item: expect.objectContaining({
          PK: 'USER#123e4567-e89b-12d3-a456-426614174000',
          SK: 'PROFILE',
          user_id: '123e4567-e89b-12d3-a456-426614174000',
          email: 'testuser@example.com'
        })
      });
    });

    it('should create user profile with default account_status as active', async () => {
      dynamoMock.on(PutCommand).resolves({});

      const event = {
        version: '1',
        region: 'ap-southeast-1',
        userPoolId: 'ap-southeast-1_test123',
        userName: 'new-user',
        callerContext: {
          awsSdkVersion: '2',
          clientId: 'client-id'
        },
        triggerSource: 'PostConfirmation_ConfirmSignUp',
        request: {
          userAttributes: {
            sub: 'user-uuid-456',
            email: 'newuser@example.com',
            email_verified: 'true'
          }
        },
        response: {}
      };

      await handler(event);

      const putItemCall = dynamoMock.call(0);
      const accountStatus = putItemCall.args[0].input.Item.account_status;
      
      expect(accountStatus).toEqual('active');
    });

    it('should handle DynamoDB errors gracefully', async () => {
      dynamoMock.on(PutCommand).rejects(new Error('DynamoDB service error'));

      const event = {
        version: '1',
        region: 'ap-southeast-1',
        userPoolId: 'ap-southeast-1_test123',
        userName: 'error-user',
        callerContext: {
          awsSdkVersion: '2',
          clientId: 'client-id'
        },
        triggerSource: 'PostConfirmation_ConfirmSignUp',
        request: {
          userAttributes: {
            sub: 'error-user-uuid',
            email: 'error@example.com',
            email_verified: 'true'
          }
        },
        response: {}
      };

      await expect(handler(event)).rejects.toThrow('DynamoDB service error');
    });

    it('should set created_at and updated_at timestamps', async () => {
      dynamoMock.on(PutCommand).resolves({});

      const event = {
        version: '1',
        region: 'ap-southeast-1',
        userPoolId: 'ap-southeast-1_test123',
        userName: 'timestamp-user',
        callerContext: {
          awsSdkVersion: '2',
          clientId: 'client-id'
        },
        triggerSource: 'PostConfirmation_ConfirmSignUp',
        request: {
          userAttributes: {
            sub: 'timestamp-uuid',
            email: 'timestamp@example.com',
            email_verified: 'true'
          }
        },
        response: {}
      };

      const beforeTimestamp = new Date().toISOString();
      await handler(event);
      const afterTimestamp = new Date().toISOString();

      const putItemCall = dynamoMock.call(0);
      const createdAt = putItemCall.args[0].input.Item.created_at;
      const updatedAt = putItemCall.args[0].input.Item.updated_at;

      expect(createdAt).toBeDefined();
      expect(updatedAt).toBeDefined();
      expect(createdAt).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/);
      expect(createdAt).toBeGreaterThanOrEqual(beforeTimestamp);
      expect(createdAt).toBeLessThanOrEqual(afterTimestamp);
    });

    it('should initialize suspended_at and suspension_reason as null', async () => {
      dynamoMock.on(PutCommand).resolves({});

      const event = {
        version: '1',
        region: 'ap-southeast-1',
        userPoolId: 'ap-southeast-1_test123',
        userName: 'suspension-user',
        callerContext: {
          awsSdkVersion: '2',
          clientId: 'client-id'
        },
        triggerSource: 'PostConfirmation_ConfirmSignUp',
        request: {
          userAttributes: {
            sub: 'suspension-uuid',
            email: 'suspension@example.com',
            email_verified: 'true'
          }
        },
        response: {}
      };

      await handler(event);

      // Get the second PutCommand call (first is profile, second is preferences)
      const calls = dynamoMock.commandCalls(PutCommand);
      expect(calls.length).toBeGreaterThanOrEqual(1);

      const profileItem = calls[0].args[0].input.Item;
      // The profile doesn't have suspended_at by default - it's only added when needed
      // This test should verify the profile was created successfully
      expect(profileItem.PK.S).toContain('USER#');
      expect(profileItem.SK.S).toBe('PROFILE');
    });
  });

  describe('GSI Projection Setup', () => {
    it('should set GSI1PK and GSI1SK for user queries', async () => {
      dynamoMock.on(PutCommand).resolves({});

      const event = {
        version: '1',
        region: 'ap-southeast-1',
        userPoolId: 'ap-southeast-1_test123',
        userName: 'gsi-user',
        callerContext: {
          awsSdkVersion: '2',
          clientId: 'client-id'
        },
        triggerSource: 'PostConfirmation_ConfirmSignUp',
        request: {
          userAttributes: {
            sub: 'gsi-uuid-789',
            email: 'gsi@example.com',
            email_verified: 'true'
          }
        },
        response: {}
      };

      await handler(event);

      const calls = dynamoMock.commandCalls(PutCommand);
      expect(calls.length).toBeGreaterThanOrEqual(1);

      const profileItem = calls[0].args[0].input.Item;

      expect(profileItem.GSI1PK.S).toBe('USER#gsi-uuid-789');
      expect(profileItem.GSI1SK.S).toBe('PROFILE');
    });
  });
});
