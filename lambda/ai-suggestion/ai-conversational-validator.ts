/**
 * AI Conversational Ingredient Validation
 * 
 * Flow:
 * 1. User nh·∫≠p ingredients (c√≥ th·ªÉ sai, spam, t√†o lao)
 * 2. AI ki·ªÉm tra & h·ªèi l·∫°i user ƒë·ªÉ confirm
 * 3. AI c·∫£nh b√°o n·∫øu ph√°t hi·ªán spam/abuse
 * 4. User confirm ‚Üí Proceed to recipe generation
 * 
 * Benefits:
 * - Simple code (AI l√†m h·∫øt validation logic)
 * - Better UX (conversational, friendly)
 * - Self-documenting (AI explains why asking)
 * - Flexible (AI adapts to context)
 */

import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';
import { logger } from '../shared/logger';
import { AbuseTrackingService } from '../shared/abuse-tracking-service';

export interface IngredientValidationRequest {
  userId: string;
  userInput: string[]; // Raw user input
  conversationHistory?: ConversationMessage[];
}

export interface ConversationMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: string;
}

export interface ValidationResponse {
  status: 'needs_confirmation' | 'confirmed' | 'rejected' | 'warning';
  message: string; // AI's message to user
  interpretedIngredients?: InterpretedIngredient[];
  warnings?: string[];
  shouldReportToAdmin?: boolean;
  adminReportReason?: string;
  nextAction: 'wait_for_user' | 'proceed_to_recipe' | 'blocked';
}

export interface InterpretedIngredient {
  original: string; // User's input
  normalized: string; // AI's interpretation
  category: string;
  confidence: 'high' | 'medium' | 'low';
  isValid: boolean;
  reason?: string; // Why AI thinks this
}

export class AIConversationalValidator {
  private client: BedrockRuntimeClient;
  private modelId: string = 'anthropic.claude-3-haiku-20240307-v1:0';

  constructor(region: string = 'us-east-1') {
    this.client = new BedrockRuntimeClient({ region });
  }

  /**
   * Validate ingredients using conversational AI
   */
  async validateIngredients(request: IngredientValidationRequest): Promise<ValidationResponse> {
    try {
      const prompt = this.buildValidationPrompt(request);
      
      const command = new InvokeModelCommand({
        modelId: this.modelId,
        contentType: 'application/json',
        accept: 'application/json',
        body: JSON.stringify({
          anthropic_version: 'bedrock-2023-05-31',
          max_tokens: 1500,
          temperature: 0.3, // Lower temperature for consistent validation
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ]
        })
      });

      const response = await this.client.send(command);
      const responseBody = JSON.parse(new TextDecoder().decode(response.body));
      
      return this.parseValidationResponse(responseBody.content[0].text);

    } catch (error) {
      logger.error('AI validation failed', { error });
      throw error;
    }
  }

  /**
   * Build conversational validation prompt
   */
  private buildValidationPrompt(request: IngredientValidationRequest): string {
    const { userInput, conversationHistory } = request;

    return `You are a friendly Vietnamese cooking assistant AI. Your job is to validate user's ingredient input and have a conversation to confirm.

USER INPUT (raw, may have typos, spam, or invalid entries):
${userInput.map((ing, i) => `${i + 1}. "${ing}"`).join('\n')}

YOUR TASKS:
1. **INTERPRET** each ingredient:
   - If missing diacritics: normalize (e.g., "ca ro" ‚Üí "C√° r√¥")
   - If typo: suggest correction
   - If spam/nonsense: flag it
   - If dangerous/inappropriate: reject it

2. **DETECT ABUSE PATTERNS**:
   üö® AUTO-REJECT if user input contains:
   - SQL injection attempts (DROP, DELETE, SELECT, etc.)
   - XSS attempts (<script>, javascript:, etc.)
   - Repeated nonsense (aaaaa, xxxxx, test123)
   - Only numbers or special characters
   - Offensive/inappropriate content
   
   üö© WARN (but allow with confirmation) if:
   - More than 2 unrecognizable ingredients
   - Unusual combinations (cement + battery + plastic)
   - Very long ingredient names (>50 chars)

3. **RESPOND TO USER** in Vietnamese:
   - If all ingredients valid ‚Üí Ask for confirmation with normalized list
   - If some unclear ‚Üí Ask which ones user meant
   - If spam detected ‚Üí Politely warn and ask to re-enter
   - If abuse detected ‚Üí Reject and warn about admin report

4. **CONFIDENCE SCORING**:
   - HIGH: Clear, common Vietnamese ingredient
   - MEDIUM: Typo but recognizable
   - LOW: Unclear, need user clarification

RESPONSE FORMAT (JSON only):
{
  "status": "needs_confirmation" | "confirmed" | "rejected" | "warning",
  "message": "Your friendly message to user in Vietnamese",
  "interpretedIngredients": [
    {
      "original": "ca ro",
      "normalized": "C√° r√¥",
      "category": "seafood",
      "confidence": "high",
      "isValid": true
    }
  ],
  "warnings": ["Optional warning messages"],
  "shouldReportToAdmin": false,
  "adminReportReason": "Only if abuse detected",
  "nextAction": "wait_for_user" | "proceed_to_recipe" | "blocked"
}

EXAMPLES:

Example 1 - Normal input with typos:
User: ["ca ro", "thit ga", "hanh la"]
Response:
{
  "status": "needs_confirmation",
  "message": "M√¨nh hi·ªÉu b·∫°n mu·ªën d√πng nh·ªØng nguy√™n li·ªáu n√†y:\n1. C√° r√¥ (con c√°)\n2. Th·ªãt g√†\n3. H√†nh l√°\n\nƒê√∫ng kh√¥ng ·∫°? Nh·∫•n 'X√°c nh·∫≠n' ƒë·ªÉ t√¨m m√≥n ƒÉn nh√©! üòä",
  "interpretedIngredients": [
    {"original": "ca ro", "normalized": "C√° r√¥", "category": "seafood", "confidence": "high", "isValid": true},
    {"original": "thit ga", "normalized": "Th·ªãt g√†", "category": "meat", "confidence": "high", "isValid": true},
    {"original": "hanh la", "normalized": "H√†nh l√°", "category": "vegetable", "confidence": "high", "isValid": true}
  ],
  "nextAction": "wait_for_user"
}

Example 2 - Unclear input:
User: ["ca xyz", "abc123", "toi"]
Response:
{
  "status": "warning",
  "message": "M√¨nh hi·ªÉu ƒë∆∞·ª£c m·ªôt s·ªë nguy√™n li·ªáu:\n‚úÖ T·ªèi\n\nNh∆∞ng kh√¥ng ch·∫Øc v·ªÅ:\n‚ùì 'ca xyz' - B·∫°n mu·ªën n√≥i c√° g√¨? (c√° r√¥, c√° l√≥c, c√° thu?)\n‚ùì 'abc123' - ƒê√¢y l√† nguy√™n li·ªáu g√¨?\n\nB·∫°n c√≥ th·ªÉ nh·∫≠p l·∫°i r√µ h∆°n kh√¥ng? ü§î",
  "interpretedIngredients": [
    {"original": "ca xyz", "normalized": "Unknown", "category": "unknown", "confidence": "low", "isValid": false, "reason": "Unclear fish type"},
    {"original": "abc123", "normalized": "Unknown", "category": "unknown", "confidence": "low", "isValid": false, "reason": "Not a recognizable ingredient"},
    {"original": "toi", "normalized": "T·ªèi", "category": "spice", "confidence": "high", "isValid": true}
  ],
  "warnings": ["2 nguy√™n li·ªáu kh√¥ng r√µ r√†ng"],
  "nextAction": "wait_for_user"
}

Example 3 - Spam/Abuse detected:
User: ["aaaaa", "xxxxx", "test123", "DROP TABLE"]
Response:
{
  "status": "rejected",
  "message": "‚ö†Ô∏è M√¨nh ph√°t hi·ªán input c√≥ v·∫•n ƒë·ªÅ:\n\n- C√°c nguy√™n li·ªáu kh√¥ng h·ª£p l·ªá (aaaaa, xxxxx, test123)\n- Ph√°t hi·ªán n·ªôi dung nguy hi·ªÉm (DROP TABLE)\n\n‚ùå ƒê·ªÉ b·∫£o v·ªá h·ªá th·ªëng, m√¨nh kh√¥ng th·ªÉ x·ª≠ l√Ω request n√†y.\n\nüö® **C·∫¢NH B√ÅO**: N·∫øu ti·∫øp t·ª•c nh·∫≠p n·ªôi dung spam ho·∫∑c c·ªë t√¨nh ph√° h·ªá th·ªëng, t√†i kho·∫£n s·∫Ω b·ªã b√°o c√°o cho admin.\n\nVui l√≤ng nh·∫≠p l·∫°i c√°c nguy√™n li·ªáu th·ª±c s·ª± b·∫°n c√≥ nh√©! üôè",
  "interpretedIngredients": [],
  "warnings": ["Spam detected", "Potential SQL injection"],
  "shouldReportToAdmin": true,
  "adminReportReason": "User attempted SQL injection with 'DROP TABLE' and submitted spam ingredients",
  "nextAction": "blocked"
}

Example 4 - Too many invalid ingredients:
User: ["cement", "battery", "plastic", "gasoline", "metal wire"]
Response:
{
  "status": "warning",
  "message": "ü§î Hmm... Nh·ªØng th·ª© n√†y c√≥ v·∫ª kh√¥ng ph·∫£i nguy√™n li·ªáu n·∫•u ƒÉn:\n\n- Cement (xi mƒÉng)\n- Battery (pin)\n- Plastic (nh·ª±a)\n- Gasoline (xƒÉng)\n- Metal wire (d√¢y kim lo·∫°i)\n\n‚ùì B·∫°n c√≥ ch·∫Øc ƒëang mu·ªën t√¨m c√¥ng th·ª©c n·∫•u ƒÉn kh√¥ng?\n\n‚ö†Ô∏è **L∆ØU √ù**: N·∫øu c·ªë t√¨nh nh·∫≠p li·ªáu v√¥ nghƒ©a nhi·ªÅu l·∫ßn, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông b√°o c√°o.\n\nVui l√≤ng nh·∫≠p l·∫°i nguy√™n li·ªáu th·∫≠t ƒë·ªÉ m√¨nh gi√∫p b·∫°n t√¨m m√≥n nh√©! üòä",
  "interpretedIngredients": [],
  "warnings": ["All ingredients are non-food items"],
  "shouldReportToAdmin": false,
  "adminReportReason": null,
  "nextAction": "wait_for_user"
}

NOW PROCESS THE USER'S INPUT AND RESPOND:`;
  }

  /**
   * Parse AI's validation response
   */
  private parseValidationResponse(aiResponse: string): ValidationResponse {
    try {
      // Extract JSON from AI response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in AI response');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      logger.info('AI validation response', {
        status: parsed.status,
        validIngredients: parsed.interpretedIngredients?.filter((i: any) => i.isValid).length || 0,
        shouldReport: parsed.shouldReportToAdmin,
      });

      return parsed;

    } catch (error) {
      logger.error('Failed to parse AI validation response', { error, aiResponse });
      throw error;
    }
  }

  /**
   * Report suspicious activity to admin with violation tracking
   */
  async reportToAdmin(
    userId: string, 
    reason: string, 
    evidence: any,
    violationType: 'spam_input' | 'sql_injection' | 'xss_attempt' | 'fake_rating' | 'bot_behavior' | 'inappropriate_content',
    severity: 'low' | 'medium' | 'high' | 'critical'
  ): Promise<void> {
    // Track violation with abuse tracking service
    const stats = await AbuseTrackingService.recordViolation(
      userId,
      violationType,
      severity,
      evidence
    );

    logger.warn('ABUSE REPORT - Violation recorded', {
      userId,
      violationType,
      severity,
      reason,
      thisWeekCount: stats.this_week_violations,
      penaltyLevel: stats.penalty_level,
      evidence,
    });

    // Log if admin was notified
    if (stats.should_notify_admin) {
      logger.warn('üö® Admin dashboard notified', {
        userId,
        violationCount: stats.this_week_violations,
      });
    }

    // Log if user was auto-suspended
    if (stats.penalty_level === 'suspended') {
      logger.error('üö´ User auto-suspended', {
        userId,
        violationCount: stats.this_week_violations,
      });
    }
  }
}

/**
 * Example usage in API endpoint:
 */
export class IngredientValidationHandler {
  private validator: AIConversationalValidator;

  constructor() {
    this.validator = new AIConversationalValidator();
  }

  async handleUserInput(userId: string, ingredients: string[]): Promise<ValidationResponse> {
    // Step 1: AI validates and asks for confirmation
    const validation = await this.validator.validateIngredients({
      userId,
      userInput: ingredients,
    });

    // Step 2: If abuse detected, report to admin
    if (validation.shouldReportToAdmin) {
      // Determine violation type and severity from validation
      let violationType: 'spam_input' | 'sql_injection' | 'xss_attempt' | 'inappropriate_content' = 'spam_input';
      let severity: 'low' | 'medium' | 'high' | 'critical' = 'medium';

      // Parse from admin report reason
      if (validation.adminReportReason?.includes('SQL injection')) {
        violationType = 'sql_injection';
        severity = 'critical';
      } else if (validation.adminReportReason?.includes('XSS') || validation.adminReportReason?.includes('<script>')) {
        violationType = 'xss_attempt';
        severity = 'critical';
      } else if (validation.adminReportReason?.includes('spam')) {
        violationType = 'spam_input';
        severity = 'medium';
      } else if (validation.adminReportReason?.includes('inappropriate')) {
        violationType = 'inappropriate_content';
        severity = 'high';
      }

      await this.validator.reportToAdmin(
        userId,
        validation.adminReportReason || 'Suspicious activity',
        { ingredients, validation },
        violationType,
        severity
      );
    }

    // Step 3: Return response to user
    return validation;
  }

  async handleUserConfirmation(userId: string, confirmed: boolean, validationId: string): Promise<any> {
    if (confirmed) {
      // Proceed to recipe generation
      logger.info('User confirmed ingredients, proceeding to recipe generation', { userId });
      return { status: 'proceed', message: 'ƒêang t√¨m m√≥n ƒÉn...' };
    } else {
      // User wants to re-enter
      return { status: 'retry', message: 'Vui l√≤ng nh·∫≠p l·∫°i nguy√™n li·ªáu' };
    }
  }
}
